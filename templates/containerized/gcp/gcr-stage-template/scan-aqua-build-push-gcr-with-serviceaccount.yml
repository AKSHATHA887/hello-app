#####################################################################################################
# 1. Containerized Docker image bake, scan with Aqua and publish to GCR                             #
# 2. Aqua Scan cannot be skipped                                                                    #
#####################################################################################################

parameters: 
- name: gcpEnvName
  default: ''
- name: gcrHost
  type: string
  default: ''
  values:
  - 'gcr.io'
  - 'asia.gcr.io'
  - 'eu.gcr.io'
  - 'us.gcr.io'
- name: vmImage
  default: 'ubuntu-latest'
- name: aquaScannerImg
  default: 'acncio.azurecr.io/aqua-scanner:latest'
- name: acnCIOACRDockerRegistry
  default: 'acncio.azurecr.io Read'
- name: pathToDockerFile
  default: ''
- name: dockerImgPathToGCR
  default: ''
- name: aquaMgmtConsoleConn
  default: 'Aqua Prod Console'
- name: gcpCredentialFile
  default: ''
- name: gcpAuthentication
  default: ''
- name: gcpKey
  type: string
  default: 'AzDoEnabled'
  values:
  - 'AzDoEnabled'
  - 'HashicorpVaultEnabled'
- name: hashiVaultEnv
  type: string
  default: 'UNSET'
  values:
  - 'NPD'
  - 'PRD'
  - 'UNSET'
- name: airID
  type: string
  default: ''
- name: gcpProjectName
  type: string
  default: ''
- name: gcpCredentialFileFromVault
  type: string
  default: 'gcpLogin.json'
- name: dockerBuildAdditionalPreSteps
  type: stepList
  default: []
  
stages: 
- stage: 'Scan_Aqua_Build_Push_GCR_${{ parameters.gcpEnvName }}'
  variables:
  - ${{ if eq(parameters.hashiVaultEnv, 'NPD') }}:
      - name: 'hashiVaultSecretEnv'
        value: 'nonProd'
  - ${{ if eq(parameters.hashiVaultEnv, 'PRD') }}:
      - name: 'hashiVaultSecretEnv'
        value: 'prod'
  jobs:
  - job: Scan_Aqua_Build_Push_GCR
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:

    - ${{ if eq(parameters.gcpKey, 'AzDoEnabled') }}:
      - task: DownloadSecureFile@1
        displayName: 'Download GCP credential file'
        inputs:
          secureFile: ${{ parameters.gcpCredentialFile }}
        enabled: true

    # Login into ACR to download the aqua scanner
    - task: Docker@2
      displayName: Login to ACN CIO ACR
      inputs:
        containerRegistry: ${{ parameters.acnCIOACRDockerRegistry }}
        command: 'login'
      enabled: true

    # Build application docker image
    - ${{ each step in parameters.dockerBuildAdditionalPreSteps }}:
      - ${{ step }}

    - script: docker build --no-cache -f ${{ parameters.pathToDockerFile }} -t ${{ parameters.dockerImgPathToGCR }} .
      displayName: Build Docker Image
      enabled: true

    # Aqua Init
    - script: |
            img_user=`docker inspect ${{ parameters.dockerImgPathToGCR }} | jq '.[0].ContainerConfig.User'`
            [ $img_user = "" -o $img_user = "root" -o $img_user = "root:root" ] && img_user="appuser:appgroup"
            docker build -t ${{ parameters.dockerImgPathToGCR }} -f- . <<EOF
            FROM ${{ parameters.dockerImgPathToGCR }}
            USER root:root
            RUN /microenforcer aqua-init
            USER $img_user
            EOF
      displayName: 'Aqua-Init'
      
    # Pull Common Aqua Scanner docker image
    - script: docker pull ${{ parameters.aquaScannerImg }}
      displayName: 'Get Aqua Scanner Image'
      enabled: true

    # Scan with Aqua
    - task: aquasecScanner@4
      displayName: Aqua Scanning Image ${{ parameters.dockerImgPathToGCR }}
      inputs:
        image: ${{ parameters.dockerImgPathToGCR }}
        scanType: 'local'
        customFlags: '--direct-cc'
        registerCompliant: true
        scanner: ${{ parameters.aquaScannerImg }}
        registry: '${{ parameters.gcrHost }}'
        connection: ${{ parameters.aquaMgmtConsoleConn }}
      enabled: true

    # Logout from ACR
    - task: Docker@2
      displayName: Logout from ACN CIO ACR
      inputs:
        containerRegistry: ${{ parameters.acnCIOACRDockerRegistry }}
        command: 'logout'
      enabled: true

    - ${{ if eq(parameters.gcpKey, 'HashicorpVaultEnabled') }}:
      - task: CIODevOps.hashicorp-vault-build-release-task-prd.custom-build-release-task.HashiVaultExt@0
        name: hashi_vault_credentials
        displayName: 'HashiCorp Vault Credentials'
        inputs:
          HashiEndpoint: '${{ parameters.airID }}-${{ parameters.hashiVaultEnv }}-HashiVault'
          return: 'secret'
          secretEnv: '$(hashiVaultSecretEnv)'
          engineType: 'gcp'
          gcpRoleSetName: '${{ parameters.gcpProjectName }}-k'

    - task: Powershell@2
      displayName: Copy GCP Credential File
      name: tf_plan_in_wks
      continueOnError: false
      timeoutInMinutes: 60
      inputs:
        targetType: inline
        script: |
          Get-ChildItem
          if ("${{ parameters.gcpKey }}" -eq "AzDoEnabled") {
            Write-Host "[Debug] parameters.gcpKey is ${{ parameters.gcpKey }}"
            Copy-Item $(Agent.TempDirectory)/${{ parameters.gcpCredentialFile }} ./keyfile.json 
            $GCP_CRED="$(Agent.TempDirectory)/${{ parameters.gcpCredentialFile }}"
            Write-Output ("##vso[task.setvariable variable=GCP_CRED;]$GCP_CRED")
            $Env:GCP_CRED = "$GCP_CRED"
          } else {
            Write-Host "[Debug] List files under Build Sources Directory"
            Get-ChildItem $(Build.SourcesDirectory)

            Write-Host "[Debug] List files under D:/ref/gcp"
            $TF_GCP_CRED_FILE_Hashi_OUTPUT = Join-Path $(Build.SourcesDirectory) "/D:/ref/gcp"
            Get-ChildItem $TF_GCP_CRED_FILE_Hashi_OUTPUT

            $TF_GCP_CRED_FILE = Join-Path $(Build.SourcesDirectory) "/D:/ref/gcp/${{ parameters.gcpCredentialFileFromVault }}"
            Copy-Item $TF_GCP_CRED_FILE ./keyfile.json 
            Write-Output ("##vso[task.setvariable variable=GCP_CRED;]$TF_GCP_CRED_FILE")
            $Env:GCP_CRED = "$TF_GCP_CRED_FILE"
          }
          Get-ChildItem
        failOnStderr: true
      enabled: true

    # Push docker image to GCR
    - bash: |
        ls -ail && pwd
        if [ "${{ parameters.gcpKey }}" = "AzDoEnabled" ]; then
          docker login -u _json_key --password-stdin https://${{ parameters.gcrHost }} < keyfile.json
        else
          projectID=`jq -r '.project_id' < keyfile.json`
          sa="sa-$projectID"
          sa=${sa::30}
          deployer="$sa@$projectID.iam.gserviceaccount.com"
          gcloud auth activate-service-account --key-file=keyfile.json
          docker login -u oauth2accesstoken -p "$(gcloud auth print-access-token --impersonate-service-account $deployer)" https://${{ parameters.gcrHost }}/$projectID
        fi
        docker push ${{ parameters.dockerImgPathToGCR }}
        docker logout
      displayName: 'Push ${{ parameters.dockerImgPathToGCR }} image'
      enabled: true

    - ${{ if eq(parameters.gcpKey, 'HashicorpVaultEnabled') }}:
      - task: CIODevOps.hashicorp-vault-remove-gcp-key.custom-build-release-task.HashiVaultRmGCPKey@0
        condition: always()
        displayName: 'HashiCorp Vault Remove Lease'
        inputs:
          HashiEndpoint: '${{ parameters.airID }}-${{ parameters.hashiVaultEnv }}-HashiVault'
          LeaseId: '$(hashi_vault_credentials.LeaseId)'