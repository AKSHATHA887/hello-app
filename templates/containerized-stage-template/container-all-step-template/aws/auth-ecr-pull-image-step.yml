parameters:
# Mandatory Parameters
- name: dockerImgTag
  default: ''
- name: awsAccessKeyId
  default: ''
- name: awsSecretAccessKey
  default: ''
- name: awsRegion
  default: ''
- name: awsAccountId
  default: ''
- name: awsNewAppTeamDeployerRole
  default: ''
- name: identifier
  default: ''

steps:
# Login ECR
- bash: |
    echo "[Debug] dockerImgTag is ${{ parameters.dockerImgTag }}"
    echo "[Debug] awsAccessKeyId is ${{ parameters.awsAccessKeyId }}"
    echo "[Debug] awsSecretAccessKey is ${{ parameters.awsSecretAccessKey }}"
    echo "[Debug] awsRegion is ${{ parameters.awsRegion }}"
    echo "[Debug] awsAccountId is ${{ parameters.awsAccountId }}"
    echo "[Debug] awsNewAppTeamDeployerRole is ${{ parameters.awsNewAppTeamDeployerRole }}"

    _temp_role=$(aws sts assume-role \
      --role-arn "${{ parameters.awsNewAppTeamDeployerRole }}" \
      --role-session-name "aws-bridge-access-assume-$(Build.BuildNumber)")

    export AWS_ACCESS_KEY_ID=$(echo $_temp_role | jq -r .Credentials.AccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(echo $_temp_role | jq -r .Credentials.SecretAccessKey)
    export AWS_SESSION_TOKEN=$(echo $_temp_role | jq -r .Credentials.SessionToken)
    export AWS_DEFAULT_REGION=$AWS_REGION

    _docker_repo=$(aws ecr get-authorization-token --output text  --query 'authorizationData[].proxyEndpoint')
    echo $_docker_repo

    aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $_docker_repo
  displayName: 'Login ${{ parameters.identifier }} ECR'
  env:
    AWS_ACCESS_KEY_ID: ${{ parameters.awsAccessKeyId }}
    AWS_SECRET_ACCESS_KEY: ${{ parameters.awsSecretAccessKey }}
    AWS_REGION: ${{ parameters.awsRegion }}
    AWS_ACCOUNT_ID: ${{ parameters.awsAccountId }}
  enabled: true

- task: Powershell@2
  displayName: Docker Image Pull
  name: docker_image_pull
  continueOnError: false
  timeoutInMinutes: 60
  inputs:
    targetType: inline
    script: |
      $cmdArgs = @(
          "pull"
          "`"${{ parameters.dockerImgTag }}`""
      )
      Write-Host "[Debug] Initial cmdArgs is $cmdArgs"

      docker $cmdArgs
    failOnStderr: true
  enabled: true