parameters:
# used to query for current iteration
- name: 'azure_devops_team_name'
  type: string
  default: ''
# used for ignoring semver 
- name: 'ignore_semver'
  type: string
  default: 'false'
# used for raising PRs against target repository
- name: 'azure_devops_repository'
  type: string
  default: ''
# used for raising PRs against target organization
- name: 'azure_devops_organization'
  type: string
  default: ''
# used for raising PRs against target PROJECT
- name: 'azure_devops_project'
  type: string
  default: ''
# used for raising PRs against target PROJECT
- name: 'azure_devops_area'
  type: string
  default: ''
# used for raising PRs against target (e.g. we start from this branch, and merge back into it)
- name: 'source_branch'
  type: string
  default: 'develop'
# used to clean any previous dependency-bot artifacts (PRs and or branches) 
- name: 'delete_previous_bot_prs_branches'
  type: string
  default: 'false'
- name: 'required_bug_fields_for_process_template'
  type: string
  default: ''
jobs:
- job: check_and_raise_job
  displayName: Run DependencyBot and raise PR if needed
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: npmAuthenticate@0
    inputs:
      workingFile: .npmrc
    displayName: 'npmAuthenticate'
    enabled: true
  - script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
    env:
      AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
    displayName: 'Login Azure DevOps Extension'
  - ${{ if eq(parameters.delete_previous_bot_prs_branches, 'true') }}:
    - script: |
              az repos pr list --organization $ORG --project "$PROJECT"  --repository $REPO --status "active" \
                --query "[?contains(sourceRefName, 'refs/heads/bot/dependency/')].pullRequestId" | jq .[] | xargs -L1 -I'{}' az repos pr update --id {} --org $ORG --status abandoned
      displayName: 'Clean Pull Requests from previous DependencyBot execution'
      continueOnError: true
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        TEAM_NAME: ${{ parameters.azure_devops_team_name }}
        REPO: ${{ parameters.azure_devops_repository }}
        ORG: ${{ parameters.azure_devops_organization }}
        PROJECT: ${{ parameters.azure_devops_project }}
    - script: |
              if [ -n "$SYSTEM_ACCESSTOKEN" ]; then 
                echo ${SYSTEM_ACCESSTOKEN} | az devops login
                az extension add --name azure-devops
                git config user.name "${TEAM_NAME}-BOT" 
                git config user.email "CIO.EA.AppArch.Teams.OperationsAndEngineering@accenture.com"
                git config http.extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN" 
              fi
              git branch -r --list 'origin/bot/dependency/*' | sed "s/origin\///" | xargs -I {} git push origin --delete {}
      displayName: 'Clean Branches from previous DependencyBot execution'
      continueOnError: true
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        TEAM_NAME: ${{ parameters.azure_devops_team_name }}
  - script: |

        # query for current iteration name
        CURRENT_ITERATION=$(az boards iteration team list --team "$TEAM_NAME" | jq -rc ' .[] | select (.attributes .timeFrame | contains("current")) | .name' | sed -e 's/ /-/g')
        CURRENT_ITERATION_PATH=$(az boards iteration team list --team "$TEAM_NAME" | jq -rc ' .[] | select (.attributes .timeFrame | contains("current")) | .path')
        echo $CURRENT_ITERATION_PATH
        AREA=$(az boards area team list --team "$TEAM_NAME" --org $ORG --project $PROJECT | jq -rc ' .defaultValue')
        echo $AREA
        NOW=$(date +"%d-%b-%Y")
        MERGE_BRANCH="dependencybot.$NOW-$CURRENT_ITERATION"


        if [ -n "$SYSTEM_ACCESSTOKEN" ]; then 
            echo ${SYSTEM_ACCESSTOKEN} | az devops login
            az extension add --name azure-devops
            git config user.name "${TEAM_NAME}-BOT" 
            git config user.email "CIO.EA.AppArch.Teams.OperationsAndEngineering@accenture.com"
            git config http.extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN" 
        fi
        git clean -fd
        git fetch -p

        git checkout $SOURCE_BRANCH
        mkdir -p $NOW
        cat package-lock.json | jq ' del(.version)' > $NOW/original-lock.json

        if [ $IGNORE_SEMVER != 'false' ]; then
            echo "Ignoring Semantically versioned 'safe' updates"
            npm i npm-check-updates --no-save
            ncu --loglevel verbose --packageFile package.json
            ncu -u --packageFile package.json > .update.md 
            npm install 
            
            UPDATE_MD=$(<$NOW/.update.md)
            cat $NOW/.update.md  > dependency-bot.md
        else
            echo "Using semantically versioned 'safe' updates"
            echo -e "\\n npm update\\n \`\`\`json\\n" > $NOW/.update.md
            UPDATE=$(npm update --json)
            echo $UPDATE >> $NOW/.update.md
            echo -e "\n \`\`\`\\n" >> $NOW/.update.md
            UPDATE_MD=$(<$NOW/.update.md)

            echo -e "\\n npm audit fix\\n \`\`\`json\\n" > $NOW/.audit.md
            AUDIT=$(npm audit fix --json)
            echo  $AUDIT >> $NOW/.audit.md
            echo -e "\n \`\`\`\\n" >> $NOW/.audit.md
            AUDIT_MD=$(<$NOW/.audit.md)

            cat $NOW/.audit.md $NOW/.update.md  > dependency-bot.md
        fi

        cat package-lock.json | jq ' del(.version)' > $NOW/update-lock.json

        DIFF=$(diff $NOW/original-lock.json $NOW/update-lock.json)
        rm $NOW/original-lock.json
        rm $NOW/update-lock.json
        rm -rf $NOW
        if [[ "$DIFF" != "" ]]; then
            git checkout -b bot/dependency/$MERGE_BRANCH 
            git add package.json
            git add package-lock.json

            git commit -m "$MERGE_BRANCH"
            git push origin bot/dependency/$MERGE_BRANCH

            BUILD_LINK=$(echo -e "${ORG}${PROJECT}/_build/results?buildId=${BUILD_BUILDID}&view=artifacts&type=publishedArtifacts")
            command="az boards work-item create --type Bug --title \"dependency-bot: ${REPO}\" --fields"

            # make BUG_FIELDS dynamic, semicolon separated 
            #     BUG_FIELDS="scrum_stage found=Build;mytitle=val"

            IFS=';'; arrIN=($BUG_FIELDS); unset IFS;
            for bug_field in "${arrIN[@]}"; do  
              command+=' "'
              command+=$bug_field
              command+='" '
            done
            command+=" --org ${ORG} --project ${PROJECT} --area \"${AREA}\" --iteration \"${CURRENT_ITERATION_PATH}\" --discussion ${BUILD_LINK}"
            WORK_ITEM=$(eval $command | jq '.id')
            az boards work-item update --id $WORK_ITEM --discussion "$UPDATE_MD"
            az boards work-item update --id $WORK_ITEM --discussion "$AUDIT_MD"
 
            PR_ID=$(az repos pr create --source-branch refs/heads/bot/dependency/$MERGE_BRANCH --target-branch $SOURCE_BRANCH --org $ORG \
                --project $PROJECT --repository $REPO --transition-work-items true --delete-source-branch true --auto-complete \
                --title $MERGE_BRANCH --description "$BUILD_LINK" --work-items $WORK_ITEM \
                | jq '.pullRequestId')
            az repos pr set-vote --id $PR_ID --org $ORG --vote 'approve'
        else
          echo "No updates found."
          echo "##vso[task.logissue type=warning]No updates found."
          exit 0
        fi

    displayName: 'Run Dependency Bot'
    continueOnError: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      SOURCE_BRANCH: ${{ parameters.source_branch }}
      TEAM_NAME: ${{ parameters.azure_devops_team_name }}
      REPO: ${{ parameters.azure_devops_repository }}
      ORG: ${{ parameters.azure_devops_organization }}
      PROJECT: ${{ parameters.azure_devops_project }}
      IGNORE_SEMVER: ${{ parameters.ignore_semver }}
      BUG_FIELDS: ${{ parameters.required_bug_fields_for_process_template }}
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      pathToPublish: 'dependency-bot.md' 
      artifactName: 'dependency bot log' 