parameters:
- name: resAddressInTFConfigFiles
  default: ''
- name: resSpecificIDToImport
  default: ''
- name: azureEnvName
  default: ''
- name: msHostedPoolVmImage
  default: ''
- name: privatePoolName
  default: ''
- name: artifactName
  default: ''
- name: archiveFilePathToExtract
  default: ''
- name: adoVarGroupName
  default: ''
- name: azureEnvPfxCertName
  default: ''
- name: azureEnvPemCertName
  default: ''  
- name: azureDevOpsSecureFiles
  type: object
  default: []
- name: azurermBackendStorageContainer
  default: ''
- name: azurermBackendStorageContainerBlobKey
  default: ''
- name: deployInfraTFLayerFolder
  default: ''
- name: condition
  default: ''
- name: pipelineResourceIdentifier
  default: ''
- name: inputTFVarDefinitionFiles
  type: object
  default: []
- name: inputTFVars
  type: object
  default: []
- name: ado_environment
  default: ''
- name: tfLog
  type: string
  default: 'UNSET'
  values:
  - UNSET
  - TRACE
  - DEBUG
  - INFO
  - WARN 
  - ERROR
- name: azdoJobContainerImg
  type: string
  default: 'tf-container-tf1.0-azure2.0:latest'
  values:
  - 'tf-container-tf13-azure2.0:latest'
  - 'tf-container-tf13.5-azure2.0:latest'
  - 'tf-container-tf14-azure2.0:latest'
  - 'tf-container-tf1.0-azure2.0:latest'
  - 'tf-container-ml-tf14:latest'

stages:
- stage: 'Terraform_Import_Infra_into_TFState_${{ parameters.azureEnvName }}'
  dependsOn: []
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  displayName: 'Terraform Import Existing Infra to TFState ${{ parameters.azureEnvName }}'
  ${{ if ne(parameters.adoVarGroupName, '') }}:
    variables:
    - group: ${{ parameters.adoVarGroupName }}
  jobs:
  - deployment: TF_Import
    displayName: Terraform Import Existing Infra to TFState ${{ parameters.azureEnvName }}
    pool:
      ${{ if ne(parameters.msHostedPoolVmImage, '') }}:
        vmImage: ${{ parameters.msHostedPoolVmImage }}
      ${{ if ne(parameters.privatePoolName, '') }}:
        name: ${{ parameters.privatePoolName }}
    container:
      image: acr5064.azurecr.io/${{ parameters.azdoJobContainerImg }}
      endpoint: CIO-5064-Tfmod-Pull-ACR
    workspace:
      clean: all
    environment: ${{ parameters.ado_environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none

          - download: ${{ parameters.pipelineResourceIdentifier }}
            enabled: true

          - task: ExtractFiles@1
            displayName: 'Extract Artifact'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}/${{ parameters.artifactName }}/${{ parameters.archiveFilePathToExtract }}'
              destinationFolder: '$(Pipeline.Workspace)/build-bundle-${{ parameters.artifactName }}-extract'
              cleanDestinationFolder: true
            enabled: true

          - task: DownloadSecureFile@1
            displayName: 'Download Azure secure file pem'
            inputs:
              secureFile: ${{ parameters.azureEnvPemCertName }}
            enabled: true
            
          - task: DownloadSecureFile@1
            displayName: 'Download secure file pfx'
            inputs:
              secureFile: ${{ parameters.azureEnvPfxCertName }}
            enabled: true

          - ${{ each secureFile in parameters.azureDevOpsSecureFiles }}:
            - task: DownloadSecureFile@1
              displayName: 'Download secure file ${{secureFile}}'
              inputs:
                secureFile: ${{secureFile}}
              enabled: true

          - task: CIODevOps.azuredevOps-build-agent-cf-cli-config-file-generator.custom-build-release-task.AzureDevOps Build Agent TF Cli Config File Generator@0
            displayName: 'AzureDevOps Build Agent TF Cli Config File Generator'
            enabled: true

          - task: Powershell@2
            displayName: Terraform Init
            name: tf_init
            continueOnError: false
            timeoutInMinutes: 10
            inputs:
              targetType: inline
              script: |
                get-childitem -path env: | where-object { $_.Name -like 'ARM*'}

                Get-childitem -path ./ -Recurse

                Get-ChildItem -path $(Agent.TempDirectory)

                $cmdArgs = @(
                    "init"
                    "-no-color"
                    "-backend-config=`"subscription_id=3de4faec-c7e9-4255-95af-ab63b5e7c44a`""
                    "-backend-config=`"resource_group_name=rg-506405sharedservices`""
                    "-backend-config=`"storage_account_name=st506405use2tfstate`""
                    "-backend-config=`"container_name=cio-proj$(PROJECT_AIR_ID)$(ENVIRONMENT)tfstate`""
                    "-backend-config=`"key=${{ parameters.azurermBackendStorageContainerBlobKey }}`""
                  )
                Write-Host  $cmdArgs 
                terraform $cmdArgs
              failOnStderr: true # Optional
            workingDirectory: $(Pipeline.Workspace)/build-bundle-${{ parameters.artifactName }}-extract/${{ parameters.deployInfraTFLayerFolder}}
            env:
              ARM_CLIENT_SECRET: $(DATABRICKS_AZURE_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            enabled: true

          - bash: |
              terraform workspace select ${{ parameters.azureEnvName }} || terraform workspace new ${{ parameters.azureEnvName }} 
              terraform workspace list -no-color 
            displayName: 'Terraform Use Workspace'
            workingDirectory: $(Pipeline.Workspace)/build-bundle-${{ parameters.artifactName }}-extract/${{ parameters.deployInfraTFLayerFolder}}
            env:
              ARM_CLIENT_SECRET: $(DATABRICKS_AZURE_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            enabled: true

          - task: Powershell@2
            displayName: Terraform Import
            name: tf_import
            continueOnError: false
            timeoutInMinutes: 60
            inputs:
              targetType: inline
              script: |
                Get-ChildItem
                if ("${{ parameters.tfLog }}" -ne "UNSET"){
                    $Env:TF_LOG="${{ parameters.tfLog }}"
                    Write-Host "TF_LOG is set to $($Env:TF_LOG)"
                    Get-ChildItem env:
                } else {
                    Write-Host "TF_LOG is unset"
                }

                $cmdArgs = @(
                    "import"
                    "-no-color"
                )

                ################## Copy other AzureDevOps secure files if exists ##################
                $azureDevOpsSecureFiles = "${{ join(';', parameters.azureDevOpsSecureFiles) }}"
                Write-Host "[Info] Start to copy secure files"
                if (![string]::IsNullOrEmpty($azureDevOpsSecureFiles)) {
                    Get-ChildItem $(Agent.TempDirectory)
                    $azureDevOpsSecureFiles.Split(";") | ForEach {
                      if (![string]::IsNullOrEmpty($_)) {
                        if (Test-Path "$(Agent.TempDirectory)/$_"){
                            Copy-Item $(Agent.TempDirectory)/$_ .
                        } else {
                            Write-Host "[Error] Secure file not exists in Agent.TempDirectory"
                        }
                      } else {
                          Write-Host "[Error] single inputTFVarDefinitionFile is empty"
                      }
                    }
                } else {
                    Write-Host "[Info] azureDevOpsSecureFiles is empty"
                }
                
                Write-Host "[Debug] Get Items in current location"
                Get-ChildItem

                # Handle terraform variable definitions (.tfvars) files
                $inputTFVarDefinitionFiles = "${{ join(';', parameters.inputTFVarDefinitionFiles) }}"
                if (![string]::IsNullOrEmpty($inputTFVarDefinitionFiles)) {
                    $inputTFVarDefinitionFiles.Split(";") | ForEach {
                      if (![string]::IsNullOrEmpty($_)) {
                        $cmdArgs += -join('-var-file=', '"', $_, '"')
                      }
                    }
                } else {
                  Write-Host "inputTFVarDefinitionFiles is empty -> $TfVarFiles"
                }

                # Handle variables on the Command Line
                $inputTFVars = "${{ join(';', parameters.inputTFVars) }}"
                if (![string]::IsNullOrEmpty($inputTFVars)) {
                    $inputTFVars.Split(";") | ForEach {
                      if (![string]::IsNullOrEmpty($_)) {
                        $cmdArgs += -join('-var=', '"', $_, '"')
                      }
                    }
                } else {
                  Write-Host "inputTFVars is empty -> $TfVarFiles"
                }

                $cmdArgs += -join(' ${{ parameters.resAddressInTFConfigFiles }} ', ${{ parameters.resSpecificIDToImport }})

                Write-Host  $cmdArgs 

                terraform $cmdArgs

                # Reads and outputs a Terraform state or plan file in a human-readable form. If no path is specified, the current state will be shown.
                terraform show
              failOnStderr: true # Optional
              workingDirectory: $(Pipeline.Workspace)/build-bundle-${{ parameters.artifactName }}-extract/${{ parameters.deployInfraTFLayerFolder}}
            env:
              ARM_CLIENT_SECRET: $(DATABRICKS_AZURE_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              GOOGLE_OAUTH_ACCESS_TOKEN: "none"
            enabled: true